@page "/accounts"
@using BlazorApp.Client.Services
@using Domain.Abstractions
@rendermode InteractiveWebAssembly
@inject AccountService Api 

<h3>Accounts</h3>

@if (!IsLoading)
{

<div>
    <label for="filter"><h3>Search:</h3></label>
    
     <input type="text" id="filter" @bind-value="searchText" @bind-value:event="oninput"
     placeholder="Type your search text"
     />

    @* <input type="text" id="filter" @bind-value="searchText" @bind-value:event="oninput" /> *@
    <!-- <input type="text" id="filter" @bind-value="searchText" @bind-value:event="oninput" /> -->

    <button type="button" @onclick="Search" class="btn btn-primary" disabled="@CannotSearch">Search</button>

    <p>Characters count: @searchText.Length</p>
</div>

}

<AccountTableTemplate Accounts="@accounts">
    <HeaderTemplate>
        <tr>
            <th>Number</th>
            <th>Balance</th>
            <th>Status</th>
        </tr>
    </HeaderTemplate>

    <RowTemplate Context="account">
        <tr>
            <td>@account.Number</td>
            <td>@account.Balance</td>
            <td>@account.Status</td>
        </tr>
    </RowTemplate>

</AccountTableTemplate>

<p>@message</p>

@code {
    private string searchText = string.Empty;

    private bool CannotSearch => searchText.Length == 0;

    private bool IsLoading = true;

    private async Task Search()
    {

    }

    // [Inject]
    // public IAccountRepository repository { get; set; }

    private IEnumerable<Account> accounts;


    private string message = "Loading Web Assembly...";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            message = "Loading accounts...";

            StateHasChanged();

            IsLoading = true;

            accounts = await Api.GetAllAsync();

            IsLoading = false;

            message = "Loaded accounts.";

            StateHasChanged();
        }
    }
}


